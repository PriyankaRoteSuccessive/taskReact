{"ast":null,"code":"var _s = $RefreshSig$();\n\nconst Validation = () => {\n  _s();\n\n  const initialValues = {\n    username: \"\",\n    email: \"\",\n    password: \"\"\n  };\n  const [formValues, setFormValues] = useState(initialValues);\n  const [formErrors, setFormErrors] = useState({});\n  const [isSubmit, setIsSubmit] = useState(false);\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormValues({ ...formValues,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setFormErrors(validate(formValues));\n    setIsSubmit(true);\n  };\n\n  useEffect(() => {\n    console.log(formErrors);\n\n    if (Object.keys(formErrors).length === 0 && isSubmit) {\n      console.log(formValues);\n    }\n  }, [formErrors]);\n\n  const validate = values => {\n    const errors = {};\n    const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i;\n\n    if (!values.username) {\n      errors.username = \"Username is required!\";\n    }\n\n    if (!values.email) {\n      errors.email = \"Email is required!\";\n    } else if (!regex.test(values.email)) {\n      errors.email = \"This is not a valid email format!\";\n    }\n\n    if (!values.password) {\n      errors.password = \"Password is required\";\n    } else if (values.password.length < 4) {\n      errors.password = \"Password must be more than 4 characters\";\n    } else if (values.password.length > 10) {\n      errors.password = \"Password cannot exceed more than 10 characters\";\n    }\n\n    return errors;\n  };\n};\n\n_s(Validation, \"+RVuQagXWuMGIFoIbfIwlZ6DgN0=\");\n\n_c = Validation;\nexport default Validation;\n\nvar _c;\n\n$RefreshReg$(_c, \"Validation\");","map":{"version":3,"sources":["/home/priyankarote/React Training/task1/src/Crud/validation.js"],"names":["Validation","initialValues","username","email","password","formValues","setFormValues","useState","formErrors","setFormErrors","isSubmit","setIsSubmit","handleChange","e","name","value","target","handleSubmit","preventDefault","validate","useEffect","console","log","Object","keys","length","values","errors","regex","test"],"mappings":";;AACA,MAAMA,UAAU,GAAG,MAAM;AAAA;;AACrB,QAAMC,aAAa,GAAG;AAAEC,IAAAA,QAAQ,EAAE,EAAZ;AAAgBC,IAAAA,KAAK,EAAE,EAAvB;AAA2BC,IAAAA,QAAQ,EAAE;AAArC,GAAtB;AACF,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BC,QAAQ,CAACN,aAAD,CAA5C;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BF,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC,KAAD,CAAxC;;AAEA,QAAMK,YAAY,GAAIC,CAAD,IAAO;AAC1B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,CAAC,CAACG,MAA1B;AACAV,IAAAA,aAAa,CAAC,EAAE,GAAGD,UAAL;AAAiB,OAACS,IAAD,GAAQC;AAAzB,KAAD,CAAb;AACD,GAHD;;AAKA,QAAME,YAAY,GAAIJ,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACK,cAAF;AACAT,IAAAA,aAAa,CAACU,QAAQ,CAACd,UAAD,CAAT,CAAb;AACAM,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD,GAJD;;AAKES,EAAAA,SAAS,CAAC,MAAM;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYd,UAAZ;;AACA,QAAIe,MAAM,CAACC,IAAP,CAAYhB,UAAZ,EAAwBiB,MAAxB,KAAmC,CAAnC,IAAwCf,QAA5C,EAAsD;AACpDW,MAAAA,OAAO,CAACC,GAAR,CAAYjB,UAAZ;AACD;AACF,GALM,EAKJ,CAACG,UAAD,CALI,CAAT;;AAME,QAAMW,QAAQ,GAAIO,MAAD,IAAY;AAC3B,UAAMC,MAAM,GAAG,EAAf;AACA,UAAMC,KAAK,GAAG,gCAAd;;AACA,QAAI,CAACF,MAAM,CAACxB,QAAZ,EAAsB;AACpByB,MAAAA,MAAM,CAACzB,QAAP,GAAkB,uBAAlB;AACD;;AACD,QAAI,CAACwB,MAAM,CAACvB,KAAZ,EAAmB;AACjBwB,MAAAA,MAAM,CAACxB,KAAP,GAAe,oBAAf;AACD,KAFD,MAEO,IAAI,CAACyB,KAAK,CAACC,IAAN,CAAWH,MAAM,CAACvB,KAAlB,CAAL,EAA+B;AACpCwB,MAAAA,MAAM,CAACxB,KAAP,GAAe,mCAAf;AACD;;AACD,QAAI,CAACuB,MAAM,CAACtB,QAAZ,EAAsB;AACpBuB,MAAAA,MAAM,CAACvB,QAAP,GAAkB,sBAAlB;AACD,KAFD,MAEO,IAAIsB,MAAM,CAACtB,QAAP,CAAgBqB,MAAhB,GAAyB,CAA7B,EAAgC;AACrCE,MAAAA,MAAM,CAACvB,QAAP,GAAkB,yCAAlB;AACD,KAFM,MAEA,IAAIsB,MAAM,CAACtB,QAAP,CAAgBqB,MAAhB,GAAyB,EAA7B,EAAiC;AACtCE,MAAAA,MAAM,CAACvB,QAAP,GAAkB,gDAAlB;AACD;;AACD,WAAOuB,MAAP;AACD,GAnBD;AAoBL,CA1CD;;GAAM3B,U;;KAAAA,U;AA2CN,eAAeA,UAAf","sourcesContent":["\nconst Validation = () => {\n    const initialValues = { username: \"\", email: \"\", password: \"\" };\n  const [formValues, setFormValues] = useState(initialValues);\n  const [formErrors, setFormErrors] = useState({});\n  const [isSubmit, setIsSubmit] = useState(false);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormValues({ ...formValues, [name]: value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setFormErrors(validate(formValues));\n    setIsSubmit(true);\n  };\n    useEffect(() => {\n        console.log(formErrors);\n        if (Object.keys(formErrors).length === 0 && isSubmit) {\n          console.log(formValues);\n        }\n      }, [formErrors]);\n      const validate = (values) => {\n        const errors = {};\n        const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i;\n        if (!values.username) {\n          errors.username = \"Username is required!\";\n        }\n        if (!values.email) {\n          errors.email = \"Email is required!\";\n        } else if (!regex.test(values.email)) {\n          errors.email = \"This is not a valid email format!\";\n        }\n        if (!values.password) {\n          errors.password = \"Password is required\";\n        } else if (values.password.length < 4) {\n          errors.password = \"Password must be more than 4 characters\";\n        } else if (values.password.length > 10) {\n          errors.password = \"Password cannot exceed more than 10 characters\";\n        }\n        return errors;\n      };\n}\nexport default Validation;"]},"metadata":{},"sourceType":"module"}