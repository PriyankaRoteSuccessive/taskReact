{"ast":null,"code":"var _jsxFileName = \"/home/priyankarote/React Training/task1/src/module/ShowdataTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Grid, Button } from '@material-ui/core';\nimport Created from './Created';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValue = {\n  name: \"\",\n  email: \"\",\n  phone: \"\",\n  dob: \"\"\n};\n\nconst ShowdataTable = () => {\n  _s();\n\n  const [gridApi, setGridApi] = useState(null);\n  const [tableData, setTableData] = useState(null);\n  const [open, setOpen] = React.useState(false);\n  const [formData, setFormData] = useState(initialValue);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    setFormData(initialValue);\n  };\n\n  const url = `http://localhost:4000/users`;\n  const columnDefs = [{\n    headerName: \"ID\",\n    field: \"id\"\n  }, {\n    headerName: \"Name\",\n    field: \"name\"\n  }, {\n    headerName: \"Email\",\n    field: \"email\"\n  }, {\n    headerName: \"phone\",\n    field: \"phone\"\n  }, {\n    headerName: \"Date of Birth\",\n    field: \"dob\"\n  }, {\n    headerName: \"Actions\",\n    field: \"id\",\n    cellRendererFramework: params => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        color: \"primary\",\n        onClick: () => handleUpdate(params.data),\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        color: \"secondary\",\n        onClick: () => handleDelete(params.value),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 78\n    }, this)\n  }]; // calling getUsers function for first time \n\n  useEffect(() => {\n    getUsers();\n  }, []); //fetching user data from server\n\n  const getUsers = () => {\n    fetch(url).then(resp => resp.json()).then(resp => setTableData(resp));\n  };\n\n  const onChange = e => {\n    const {\n      value,\n      id\n    } = e.target; // console.log(value,id)\n\n    setFormData({ ...formData,\n      [id]: value\n    });\n  };\n\n  const onGridReady = params => {\n    setGridApi(params);\n  }; // setting update row data to form data and opening pop up window\n\n\n  const handleUpdate = oldData => {\n    setFormData(oldData);\n    handleClickOpen();\n  }; //deleting a user\n\n\n  const handleDelete = id => {\n    const confirm = window.confirm(\"Are you sure, you want to delete this row\", id);\n\n    if (confirm) {\n      fetch(url + `/${id}`, {\n        method: \"DELETE\"\n      }).then(resp => resp.json()).then(resp => getUsers());\n    }\n  };\n\n  const handleFormSubmit = () => {\n    if (formData.id) {\n      //updating a user \n      const confirm = window.confirm(\"Are you sure, you want to update this row ?\");\n      confirm && fetch(url + `/${formData.id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(formData),\n        headers: {\n          'content-type': \"application/json\"\n        }\n      }).then(resp => resp.json()).then(resp => {\n        handleClose();\n        getUsers();\n      });\n    } else {\n      // adding new user\n      fetch(url, {\n        method: \"POST\",\n        body: JSON.stringify(formData),\n        headers: {\n          'content-type': \"application/json\"\n        }\n      }).then(resp => resp.json()).then(resp => {\n        handleClose();\n        getUsers();\n      });\n    }\n  };\n\n  const defaultColDef = {\n    sortable: true,\n    flex: 1,\n    filter: true,\n    floatingFilter: true\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      align: \"center\",\n      children: \"React-App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"CRUD Operation with Json-server in ag-Grid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      align: \"right\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleClickOpen,\n        children: \"Add user\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ag-theme-alpine\",\n      style: {\n        height: '400px'\n      },\n      children: /*#__PURE__*/_jsxDEV(AgGridReact, {\n        rowData: tableData,\n        columnDefs: columnDefs,\n        defaultColDef: defaultColDef,\n        onGridReady: onGridReady\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormDialog, {\n      open: open,\n      handleClose: handleClose,\n      data: formData,\n      onChange: onChange,\n      handleFormSubmit: handleFormSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ShowdataTable, \"fH6KUDmV++fEkgSWH/ZcHLxbNMQ=\");\n\n_c = ShowdataTable;\nexport default ShowdataTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShowdataTable\");","map":{"version":3,"sources":["/home/priyankarote/React Training/task1/src/module/ShowdataTable.js"],"names":["React","useState","useEffect","AgGridReact","Grid","Button","Created","initialValue","name","email","phone","dob","ShowdataTable","gridApi","setGridApi","tableData","setTableData","open","setOpen","formData","setFormData","handleClickOpen","handleClose","url","columnDefs","headerName","field","cellRendererFramework","params","handleUpdate","data","handleDelete","value","getUsers","fetch","then","resp","json","onChange","e","id","target","onGridReady","oldData","confirm","window","method","handleFormSubmit","body","JSON","stringify","headers","defaultColDef","sortable","flex","filter","floatingFilter","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Grid, Button } from '@material-ui/core';\nimport Created from './Created';\nconst initialValue = { name: \"\", email: \"\", phone: \"\", dob: \"\" }\nconst ShowdataTable = () => {\n  const [gridApi, setGridApi] = useState(null)\n  const [tableData, setTableData] = useState(null)\n  const [open, setOpen] = React.useState(false);\n  const [formData, setFormData] = useState(initialValue)\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    setFormData(initialValue)\n  };\n  const url = `http://localhost:4000/users`\n  const columnDefs = [\n    { headerName: \"ID\", field: \"id\" },\n    { headerName: \"Name\", field: \"name\", },\n    { headerName: \"Email\", field: \"email\", },\n    { headerName: \"phone\", field: \"phone\" },\n    { headerName: \"Date of Birth\", field: \"dob\" },\n    {\n      headerName: \"Actions\", field: \"id\", cellRendererFramework: (params) => <div>\n        <Button variant=\"outlined\" color=\"primary\" onClick={() => handleUpdate(params.data)}>Update</Button>\n        <Button variant=\"outlined\" color=\"secondary\" onClick={() => handleDelete(params.value)}>Delete</Button>\n      </div>\n    }\n  ]\n  // calling getUsers function for first time \n  useEffect(() => {\n    getUsers()\n  }, [])\n\n  //fetching user data from server\n  const getUsers = () => {\n    fetch(url).then(resp => resp.json()).then(resp => setTableData(resp))\n  }\n  const onChange = (e) => {\n    const { value, id } = e.target\n    // console.log(value,id)\n    setFormData({ ...formData, [id]: value })\n  }\n  const onGridReady = (params) => {\n    setGridApi(params)\n  }\n\n  // setting update row data to form data and opening pop up window\n  const handleUpdate = (oldData) => {\n    setFormData(oldData)\n    handleClickOpen()\n  }\n  //deleting a user\n  const handleDelete = (id) => {\n    const confirm = window.confirm(\"Are you sure, you want to delete this row\", id)\n    if (confirm) {\n      fetch(url + `/${id}`, { method: \"DELETE\" }).then(resp => resp.json()).then(resp => getUsers())\n\n    }\n  }\n  const handleFormSubmit = () => {\n    if (formData.id) {\n      //updating a user \n      const confirm = window.confirm(\"Are you sure, you want to update this row ?\")\n      confirm && fetch(url + `/${formData.id}`, {\n        method: \"PUT\", body: JSON.stringify(formData), headers: {\n          'content-type': \"application/json\"\n        }\n      }).then(resp => resp.json())\n        .then(resp => {\n          handleClose()\n          getUsers()\n\n        })\n    } else {\n      // adding new user\n      fetch(url, {\n        method: \"POST\", body: JSON.stringify(formData), headers: {\n          'content-type': \"application/json\"\n        }\n      }).then(resp => resp.json())\n        .then(resp => {\n          handleClose()\n          getUsers()\n        })\n    }\n  }\n\n  const defaultColDef = {\n    sortable: true,\n    flex: 1, filter: true,\n    floatingFilter: true\n  }\n  return (\n    <div className=\"App\">\n      <h1 align=\"center\">React-App</h1>\n      <h3>CRUD Operation with Json-server in ag-Grid</h3>\n      <Grid align=\"right\">\n        <Button variant=\"contained\" color=\"primary\" onClick={handleClickOpen}>Add user</Button>\n      </Grid>\n      <div className=\"ag-theme-alpine\" style={{ height: '400px' }}>\n        <AgGridReact\n          rowData={tableData}\n          columnDefs={columnDefs}\n          defaultColDef={defaultColDef}\n          onGridReady={onGridReady}\n        />\n      </div>\n      <FormDialog open={open} handleClose={handleClose}\n        data={formData} onChange={onChange} handleFormSubmit={handleFormSubmit} />\n    </div>\n  );\n}\n\nexport default ShowdataTable;"]},"metadata":{},"sourceType":"module"}